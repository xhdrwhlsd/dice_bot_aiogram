from aiogram import Bot, Dispatcher, executor, types

import db

import sqlite3

import config as cfg

import time

import asyncio

from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
                                      
from contextlib import suppress                                      
from aiogram.types import ReplyKeyboardRemove
import buttons




base = sqlite3.connect('new.db')
cur = base.cursor()






x = ['—â–µ–ª–±–∞–Ω', '—Ñ–æ—Ñ–∞–Ω', '–ª–æ—Å—å', '–∫–æ–Ω—å']

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

#ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12




async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()

async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')


@dp.message_handler(commands=['start'])
async def start(message:types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ /help',reply_markup=buttons.kb_delete)

@dp.message_handler(commands=['–ü–µ—Ä–≤—ã–π'], commands_prefix = 'üé≤')
async def dice(message:types.Message):
    global first, firstid
    firstid = message.from_user.id
    first = message.from_user.username
    a = await message.answer('–ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –µ—Å—Ç—å! –ö—Ç–æ –≤—Ç–æ—Ä–æ–π?', reply_markup=buttons.kb2)
    asyncio.create_task(delete_message(a,30))
    print(first)
    await message.delete()




@dp.message_handler(commands=['–í—Ç–æ—Ä–æ–π'], commands_prefix='üé≤')
async def d(message:types.Message):
    global second, secondid
    secondid = message.from_user.id
    second = message.from_user.username
    await message.delete()
    print(second)

    if first == second:
        await message.answer('–í—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.')
        print(second)
    
        

    else:
        c = await message.answer('–ì–æ—Ç–æ–≤–æ! –ò–≥—Ä–∞ —Å–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è', reply_markup=buttons.kb_delete)
        asyncio.create_task(delete_message(c,30))
        time.sleep(2)
        a =  await message.answer_dice('üé≤')
        a
        time.sleep(4)
        b =  await message.answer_dice('üé≤')
        time.sleep(4)
        c = a.dice.value
        d = b.dice.value
        if c>d:
            await message.answer(f'@{second}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª')
            db.udpate(firstid)
            #await message.answer(f'–ü—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É {random.choice(x)}')
        elif d>c:
            await message.answer(f'@{first}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª')
            db.udpate(secondid)
            #await message.answer(f'–ü—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É {random.choice(x)}')
        else:
            await message.answer('–ù–∏—á—å—è!')

@dp.message_handler(commands=['help'])
async def help(message:types.Message):
    await message.answer('/reg - –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—á–µ—Ç–∞ –í–∞—à–∏—Ö –ø–æ–±–µ–¥.\n/dice - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.\n/stats - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –ø–æ–±–µ–¥.\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!')

@dp.message_handler(commands=['reg'])
async def reg(message:types.Message):
    try:
        db.add(message.from_user.id, 0, message.from_user.username)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.')
    except:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.message_handler(commands=['dice'])
async def dice(message:types.Message):
    b = await message.answer( '–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=buttons.kb1)
    asyncio.create_task(delete_message(b,30))

@dp.message_handler(commands=['stats'])
async def stats(message:types.Message):
    users = message.from_user.id
    for a in cur.execute(f'SELECT stats FROM data WHERE id == {users}').fetchone():
        await message.answer(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {a} —Ä–∞–∑(-–∞)')





   


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)    